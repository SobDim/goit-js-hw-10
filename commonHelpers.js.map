{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport { errorMsg } from './izi-toast-options';\n\n// Timer\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst display = document.querySelector('.timer');\nconst startBtn = document.querySelector('[data-start]');\n\nerrorMsg.message = 'Please choose a date in the future';\n\nlet diff;\nlet selectedDate;\n// flatpickr options\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (Date.now() > selectedDates[0]) {\n      startBtn.disabled = true;\n      return iziToast.error(errorMsg);\n    }\n    startBtn.disabled = false;\n    selectedDate = selectedDates[0];\n\n    countInterval();\n  },\n};\n\nstartBtn.disabled = true;\n\nfunction countInterval() {\n  diff = selectedDate - Date.now();\n  const { days, hours, minutes, seconds } = convertMs(diff);\n  render(days, hours, minutes, seconds);\n}\n\nstartBtn.addEventListener('click', () => {\n  startBtn.disabled = true;\n  dateTimePicker.disabled = true;\n\n  const intervalId = setInterval(() => {\n    countInterval();\n\n    if (diff < 1000) {\n      clearInterval(intervalId);\n      dateTimePicker.disabled = false;\n    }\n  }, 1000);\n});\n\n// flatpickr run\nflatpickr(dateTimePicker, options);\n\nfunction render(days, hours, minutes, seconds) {\n  display.querySelector('[data-days]').textContent = String(days).padStart(\n    2,\n    '0'\n  );\n\n  display.querySelector('[data-hours]').textContent = String(hours).padStart(\n    2,\n    '0'\n  );\n  display.querySelector('[data-minutes]').textContent = String(\n    minutes\n  ).padStart(2, '0');\n  display.querySelector('[data-seconds]').textContent = String(\n    seconds\n  ).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["dateTimePicker","display","startBtn","errorMsg","diff","selectedDate","options","selectedDates","iziToast","countInterval","days","hours","minutes","seconds","convertMs","render","intervalId","flatpickr","ms"],"mappings":"sJAOA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAU,SAAS,cAAc,QAAQ,EACzCC,EAAW,SAAS,cAAc,cAAc,EAEtDC,EAAS,QAAU,qCAEnB,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAI,KAAK,IAAG,EAAKA,EAAc,CAAC,EAC9B,OAAAL,EAAS,SAAW,GACbM,EAAS,MAAML,CAAQ,EAEhCD,EAAS,SAAW,GACpBG,EAAeE,EAAc,CAAC,EAE9BE,GACD,CACH,EAEAP,EAAS,SAAW,GAEpB,SAASO,GAAgB,CACvBL,EAAOC,EAAe,KAAK,MAC3B,KAAM,CAAE,KAAAK,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUV,CAAI,EACxDW,EAAOL,EAAMC,EAAOC,EAASC,CAAO,CACtC,CAEAX,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBF,EAAe,SAAW,GAE1B,MAAMgB,EAAa,YAAY,IAAM,CACnCP,IAEIL,EAAO,MACT,cAAcY,CAAU,EACxBhB,EAAe,SAAW,GAE7B,EAAE,GAAI,CACT,CAAC,EAGDiB,EAAUjB,EAAgBM,CAAO,EAEjC,SAASS,EAAOL,EAAMC,EAAOC,EAASC,EAAS,CAC7CZ,EAAQ,cAAc,aAAa,EAAE,YAAc,OAAOS,CAAI,EAAE,SAC9D,EACA,GACJ,EAEET,EAAQ,cAAc,cAAc,EAAE,YAAc,OAAOU,CAAK,EAAE,SAChE,EACA,GACJ,EACEV,EAAQ,cAAc,gBAAgB,EAAE,YAAc,OACpDW,CACJ,EAAI,SAAS,EAAG,GAAG,EACjBX,EAAQ,cAAc,gBAAgB,EAAE,YAAc,OACpDY,CACJ,EAAI,SAAS,EAAG,GAAG,CACnB,CAEA,SAASC,EAAUI,EAAI,CAQrB,MAAMR,EAAO,KAAK,MAAMQ,EAAK,KAAG,EAE1BP,EAAQ,KAAK,MAAOO,EAAK,MAAO,IAAI,EAEpCN,EAAU,KAAK,MAAQM,EAAK,MAAO,KAAQ,GAAM,EAEjDL,EAAU,KAAK,MAASK,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}